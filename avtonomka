import rospy
from clover import srv
from std_srvs.srv import Trigger
from clover.srv import SetLEDEffect
from cv_bridge import CvBridge

rospy.init_node('flight')

get_telemetry = rospy.ServiceProxy('get_telemetry', srv.GetTelemetry)
navigate = rospy.ServiceProxy('navigate', srv.Navigate)
navigate_global = rospy.ServiceProxy('navigate_global', srv.NavigateGlobal)
set_position = rospy.ServiceProxy('set_position', srv.SetPosition)
set_velocity = rospy.ServiceProxy('set_velocity', srv.SetVelocity)
set_attitude = rospy.ServiceProxy('set_attitude', srv.SetAttitude)
set_rates = rospy.ServiceProxy('set_rates', srv.SetRates)
land = rospy.ServiceProxy('land', Trigger)
set_effect = rospy.ServiceProxy('led/set_effect', SetLEDEffect)

bridge = CvBridge()

def image_callback(data):
    global color
    cv_image = bridge.imgmsg_to_cv2(data, 'bgr8')

    img_hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)[119:120, 159:160]

    red_low1 = (0, 50, 50)
    red_high1 = (15, 255, 255)

    red_low2 = (165, 90, 90)
    red_high2 = (180, 255, 255)

    yellow_low = (16, 50, 50)
    yellow_high = (45, 255, 255)

    green_low = (80, 100, 100)
    green_high = (120, 100, 100)

    blue_low = (200, 100, 100)
    blue_high = (240, 100, 100)


    red_thresh1 = cv2.inRange(img_hsv, red_low1, red_high1)
    red_thresh2 = cv2.inRange(img_hsv, red_low2, red_high2)
    red_thresh = cv2.inRange(img_hsv, red_thresh1, red_thresh2)
    yellow_thresh = cv2.inRange(img_hsv, yellow_low, yellow_high)
    green_thresh = cv2.inRange(img_hsv, green_low, green_high) 
    blue_thresh = cv2.inRange(img_hsv, blue_low, blue_high)

    if red_thresh[0][0] == 255:
        color = "red"
    elif yellow_thresh[0][0] == 255:
        color = "yellow"
    elif green_thresh[0][0] == 255:
        color = "green"
    elif blue_thresh[0][0] == 255:
        color = "blue"
    else:
        color = "undefined"

image_sub = rospy.Subscriber('main_camera/image_raw', Image, image_callback, queue_size=1)

navigate(x=0, y=0, z=1, frame_id='body', auto_arm=True)
rospy.sleep(3)
if color[0] == "red":
        set_effect(255, 0, 0)
elif color[0] == "yellow":
        set_effect(255, 255, 0)
elif color[0] == "green":
        set_effect(0, 255, 0)
elif color[0] == "blue":
        set_effect(0, 0, 255)
else:
        set_effect(effect='rainbow')

navigate(x=1.5, y=1.5, z=1, frame_id='aruco_map')
rospy.sleep(7)
if color[0] == "red":
        set_effect(255, 0, 0)
elif color[0] == "yellow":
        set_effect(255, 255, 0)
elif color[0] == "green":
        set_effect(0, 255, 0)
elif color[0] == "blue":
        set_effect(0, 0, 255)
else:
        set_effect(effect='rainbow')

navigate(x=1.5, y=4, z=1, frame_id='aruco_map')
rospy.sleep(7)
if color[0] == "red":
        set_effect(255, 0, 0)
elif color[0] == "yellow":
        set_effect(255, 255, 0)
elif color[0] == "green":
        set_effect(0, 255, 0)
elif color[0] == "blue":
        set_effect(0, 0, 255)
else:
        set_effect(effect='rainbow')

navigate(x=5.5, y=3, z=1, frame_id='aruco_map')
rospy.sleep(3)
if color[0] == "red":
        set_effect(255, 0, 0)
elif color[0] == "yellow":
        set_effect(255, 255, 0)
elif color[0] == "green":
        set_effect(0, 255, 0)
elif color[0] == "blue":
        set_effect(0, 0, 255)
else:
        set_effect(effect='rainbow')

navigate(x=7.5, y=3.5, z=1, frame_id='aruco_map')
rospy.sleep(7)
if color[0] == "red":
        set_effect(255, 0, 0)
elif color[0] == "yellow":
        set_effect(255, 255, 0)
elif color[0] == "green":
        set_effect(0, 255, 0)
elif color[0] == "blue":
        set_effect(0, 0, 255)
else:
        set_effect(effect='rainbow')


navigate(x=1, y=1, z=1, frame_id='aruco_map')
rospy.sleep(7)

land()
